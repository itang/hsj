<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
  <meta name="description" content="">
  <meta name="author" content="">
  <link rel="icon" href="favicon.ico">
  <title>Languages Sheet</title>
  <link rel="stylesheet" href="/assets/vendor/writ.min.css">
  <link rel="stylesheet" href="http://cdn.staticfile.org/semantic-ui/0.19.3/css/semantic.min.css">
  <link rel="stylesheet" href="/assets/css/main.css">
</head>
<body>
<div class="ui container">
  <h1>Languages Sheet</h1>
  <div><span>create time: 2015-08-26</span><span>update time: 2015-08-26</span></div>
  <table>
    <tr><th>Category</th><th>item</th><th>Scala</th><th>Ruby</th><th>Crystal</th><th>Elixir</th><th>Rust</th><th>Julia</th></tr>

    <!-- Hello, world -->
    <tr>
      <td></td><td>Hello World</td>
      <td><code>println("Hello, World")</code></td>
      <td><code>puts 'Hello, World'</code></td>
      <td><code>puts "Hello, World"</code></td>
      <td><code>IO.puts "Hello, World"</code></td>
      <td><code>println!("Hello, World")</code></td>
      <td><code>println("Hello, World")</code></td>
    </tr>

    <!-- Ecosystem -->
    <tr>
      <td></td><td>Compiler</td>
      <td><code>$ scalac script.scala</code></td>
      <td><code>-</code></td>
      <td><code>$ crystal build script.cr</code></td>
      <td><code>$ elixirc script.exs</code></td>
      <td><code>$ rustc script.rs</code></td>
      <td><code></code></td>
    </tr>
    <tr>
      <td></td><td>Launcher</td>
      <td><code>$ scala script.scala</code></td>
      <td><code>$ ruby script.rb</code></td>
      <td><code>$ crystal script.cr</code></td>
      <td><code>$ elixir script.exs <br/>$ elixir -S mix new kv --module KV  <br>(When using -S, elixir finds the script wherever it is in your PATH and executes it)</code></td>
      <td><code>-</code></td>
      <td><code>julia script.jl</code></td>
    </tr>
    <tr>
      <td></td><td>REPL</td>
      <td><code>$ scala <br> $ sbt console</code></td>
      <td><code>$ irb</code></td>
      <td><code>-</code></td>
      <td><code>$ iex <br> $ iex -S mix</code></td>
      <td><code>$ rusti</code></td>
      <td><code>$ julia</code></td>
    </tr>
    <tr>
      <td></td><td>Eval Expr</td>
      <td><code>$ scala -e 'println("hello")'</code></td>
      <td><code>$ ruby -e 'puts "hello"'</code></td>
      <td><code>$ crystal eval 'puts "hello"'</code></td>
      <td><code>$ elixir -e 'IO.puts "hello"'</code></td>
      <td><code>-</code></td>
      <td><code>$ julia -e 'println("hello")'</code></td>
    </tr>
    <tr>
      <td></td><td>Build Tool</td>
      <td><code>sbt, activator</code></td>
      <td><code>rake, bundle</code></td>
      <td><code>-</code></td>
      <td><code>mix</code></td>
      <td><code>cargo</code></td>
      <td><code></code></td>
    </tr>
    <tr>
      <td></td><td>New Project</td>
      <td><code>$ activator new dd play-scala</code></td>
      <td><code>$ bundle gem how_i_start</code></td>
      <td><code>$ crystal init TYPE NAME [DIR] <br>$ crystal init app hello </code></td>
      <td><code>$ mix new PATH [--sup] [--module MODULE] [--app APP] [--umbrella]  <br>$ mix new kv --module KV</code></td>
      <td><code>$ cargo new [options] &lt;path&gt; <br/>$ cargo new --bin hello</code></td>
      <td><code></code></td>
    </tr>
    <!-- END Ecosystem -->
    <!-- with Process -->
    <tr>
      <td></td><td>extern process</td>
      <td><code>import sys.process._; "ls -l" !; "ls -l" !!</code></td>
      <td><code>system 'ls -l'; `ls -l`</code></td>
      <td><code>system "ls -l"; `ls -l`</code></td>
      <td><code>System.cmd "ls", ["-l"]</code></td>
      <td><code>-</code></td>
      <td><code>`ls -l` |> run</code></td>
    </tr>

    <!-- end with Process -->

    <!-- Collections -->
    <tr>
      <td></td><td>Array wrap</td>
      <td><code>-</code></td>
      <td><code>[*foo], Array(foo)<br/>[*[1,2]] => [1, 2]; [*1] => [1]</code></td>
      <td><code>-</code></td>
      <td><code>List.wrap(foo) <br/>List.wrap([1,2]) => [1, 2]; List.wrap(1) => [1]</code></td>
      <td><code></code></td>
      <td><code></code></td>
    </tr>
    <tr>
      <td></td><td>Array sigil</td>
      <td><code>-</code></td>
      <td><code>%w(hello world)</code></td>
      <td><code>%w(hello world)</code></td>
      <td><code>~w(hello world)</code></td>
      <td><code></code></td>
      <td><code></code></td>
    </tr>
    <!-- END Collections -->
    <!-- Snippets -->
    <tr>
      <td></td><td>String Code Generate</td>
      <td><code>println((1 to 100).map( x => s"""a${x}: String = "$x"""").mkString(", "))</code></td>
      <td><code>puts (1..100).map{|x| %(a#{x}: String = "#{x}")}.join(", ")</code></td>
      <td><code>puts (1..100).map{|x| %(a#{x}: String = "#{x}")}.join(", ")</code></td>
      <td><code>0..100 |> Enum.map( &( ~s[a#{&1}: String = "#{&1}"] )) |> Enum.join(", ") |> IO.puts</code></td>
      <td><code>println!("{}", (1..100).map(|x| format!("a{}: String = \"{}\"", x, x)).collect::<Vec<_>>().connect(", "));</code></td>
      <td><code>join(map(x -> "a$x: String = \"$x\"", range(1, 100)), ", ") |> println</code></td>
    </tr>
    <!-- END Snippets -->
  </table>
</div>
</body>
</html>
